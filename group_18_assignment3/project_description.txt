A project description text file, assignment3_description.txt, that tells us what functionalities you've implemented, other interesting features or 
extra credit within the program, software it relies on that you didn't write, and issues you encountered if there are unresolved problems. This will 
also include documentation of which group member worked on which part of the assignment. While group coding is allowed, each member is responsible for 
individual parts -- this ensures all group members are participating and have mastery of the assignment.


-- extract_words.py:
Salomone wrote the first part of the extract_words.py file. They helped with providing the code by creating text files and writing in them, by 
turning the book into alltext.txt, making a dictionary and keeping count for word frequency. Hannah then adapted it and inserted it and worked 
on the second half. They also helped with some debugging and working out the logic.

Hannah wrote part of the extract_words.py file. She wrote the code to generate the uniquewords.txt file and the wordfrequency.txt file.
Under the #unique words comment, the code takes the dictionary and finds values equal to 1 (meaning the words that show up once) writes it into the uniquewords.txt file.
Under the # frequencies of words comment, the code creates a counter for the frequencies of words and the number of words of that frequency.

TheProjectGutenbergeBookofTheTime_wordcloud.png:
Using the online word cloud generator, Hannah uploaded the allwords.txt file and created the word cloud and asked for our groups input!
We used a color palette on coolors.co and also edited the three different fonts we used to Saira, PT Mono, and Alata.
The shape of the cloud is a person reading a book.


-- a3_novelvisualization:
Randy (james) wrote this code which visualizes random unique words in the novel. This visualization included several choices. One choice was the font, which we chose
because it looked nice and was somewhat legible. For font size, we chose a size that kept the visualization readable but could also filled the screen with a 
reasonable amount of words. Lastly for color choice, we chose to use a color triad scheme with teal, pink, and yellow as our colors because the contrasting colors 
looked nice. We determined that a convineint way to choose these colors was to use the words length. We set threshold lengths of words so that each of the colors 
would show up roughly 1/3 of the time. Additionally, this code uses an arraylist (an array that can change size) which is convineint for displaying random, non-repeating 
words.

-- a3_wordfrequency:
Taylor created a dot graph to represent the word frequency data from The Time Machine. The x-axis represents the frequency data (shortened to "uses") and the y-axis 
represents the word data. One important decision in the design of the visualization was color. Pink and yellow were used against a dark purple background to help the 
information stand out. Yellow was used to represent frequency data, and pink was used to represent word data. One can see the data represented in each point by using 
the LEFT and RIGHT arrows to navigate through the graphâ€”when the user visits a point, the point is highlighted white.



