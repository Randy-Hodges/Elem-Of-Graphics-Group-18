 Assignment 7 Description
 
 Game Functionality/Rules/How to Win or Lose:
 The user presses keys W, A, S, and D to move across the screen and moves their mouse on the screen to aim their dodgeball. The player clicks 
 on the screen to throw their ball, trying to hit all the enemies on the other side of the screen. The enemies on the other side of the court is also
 throwing dodgeballs back at the player. The player is spawned in the lower half of the screen and cannot pass the vertical
 midpoint line. The player wins the game if they hit all the enemies on the other side of the line. The player loses if they get hit by one of the enemies.
 
 Group Members (1- Classes, 2- Unexpected Challenges):
 
  Randy:
  1. Randy made the Bully class and worked a fair bit on the dodgeball class. The bully class contains all of the code that displays, moves, and does the logic
     with the enemy dodgeball players. The bullies move around, move away/towards balls depending on their state, and throws balls towards the player with
     a range of potential angles. The dodgeball class are the balls on screen, but Taylor will explain this class in more detail. The bullies do a lot of 
     what I originally intended. They have multiple difficulty levels, move around in interesting ways, and throw the ball towards the target.
  2. In terms of unexpected challenges, making everything work together had some challenges that took some time. Additionally, as of the time that I am 
     writing this, I don't think the multiple difficulty levels will be accessible because the GUI was very late in getting made. Also, sometimes
      the bullies get stuck on edges. I don't currently know what is causing that.
  
  Taylor:
  1.
  2. 
  
  Hannah:
  1. The classes I created were the Player and Ball class. The Player class is what the user interacts with as it draws the main character on the screen
  and allow you to move around. I also created a Ball class that allowed the user to throw balls with the spacebar, but Taylor ended up switching the interactivity
  with the throwBall() function into her class! The Ball class that I created was used as a template for Taylor's Dodgeball class instead! I also created the
  images of the loading screen and game over screen for when the player either wins or loses.
  2. I didn't have any challenges making the player class code, however it was a little difficult to piece everything together with the user interface and the
  other classes as well like the dodgeball class.
  
  Salomonoe:
  1. Classes done are the Score class and Field class. Field may change colors for different themes. 
  Score keeps points up when hitting others. Added functionality to have separate screens for 
  starting game, playing, and end screen of win or lose. Received help with website 
  https://www.toptal.com/game/ultimate-guide-to-processing-simple-game as a skeleton to put our code.
  2. Problems with pausing the game and being able to keep saveState. Didn't add a slider for difficulty
  as I thought I would do. Not as many different menus as I thought would be put.
